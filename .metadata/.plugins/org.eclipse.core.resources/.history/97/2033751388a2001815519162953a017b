import java.util.Calendar;

import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;

public class ClockPane extends Pane{
	private int hour;
	private int minute;
	private int second;
	private double width=500;
	private double length= 500;
	private Calendar calendar;
	
	public ClockPane(){
        calendar = Calendar.getInstance();
		hour = getCurrentHour();
		if ( hour >= 12) {
			hour = hour-12;
		}
		minute = getCurrentMinute();
		second = getCurrentSecond();
		this.getClock(hour,minute,second);
	}
	
	public ClockPane(int hour, int minute,int second) {
		this.hour = hour;
		this.minute = minute;
		this.second = second;
		if ( hour >= 12) {
			hour = hour-12;
		}
		this.getClock(hour,minute,second);
		this.addNumbers();
	}

	
	private void addNumbers() {
		Text text1 = new Text(this.getCenterX(),this.getCenterY()+ Math.min(width, length)*0.9/2,"12");
		Text text2 = new Text(this.getCenterX()+ Math.min(width, length)*0.9/2,this.getCenterY(),"3");
		Text text3 = new Text(this.getCenterX(),this.getCenterY()- Math.min(width, length)*0.9/2,"6");
		Text text4 = new Text(this.getCenterX()-Math.min(width, length)*0.9/2,this.getCenterY(),"9");
		
		this.getChildren().addAll(text1,text2,text3,text4);
		
	}

	public ClockPane(int second2, int hour2, int minute2, double width2, double length2) {
		this(second2,hour2,minute2);
		this.width = width2;
		this.length = length2;
	}

	//this method is to draw the clock
	private void getClock(int hour, int minute, int second) {
		//draw the peripheral circle first
		this.getCircle();

		
		//add Hands
		this.printSecondHand(second);
		this.printMinuteHand(second, minute);
		this.printHourHand(second,minute,hour);
		
	}

	private void printHourHand(int second, int minute, int hour) {
		double  handLength = Math.min(width, length)/2 * 0.40;
		double secondX = getCenterX()+handLength*Math.sin((hour + minute/60)*Math.PI/6);
		double secondY = getCenterY() - handLength*Math.cos((hour + minute/60)*Math.PI/6);
		Line line = new Line (getCenterX(),getCenterY(),secondX,secondY);
		line.setStroke(Color.GREEN);
		line.setStrokeWidth(4);
		this.getChildren().add(line);
		
	}

	private void printMinuteHand(int second, int minute) {
		double  handLength = Math.min(width, length)/2 * 0.55;
		double secondX = getCenterX() + handLength*Math.sin(minute*Math.PI/30);
		double secondY = getCenterY() - handLength*Math.cos(minute*Math.PI/30);
		Line line = new Line (getCenterX(),getCenterY(),secondX,secondY);
		line.setStroke(Color.RED);
		line.setStrokeWidth(3);
		this.getChildren().add(line);
		
	}

	private void printSecondHand(int second) {
		double  handLength = Math.min(width, length)/2 * 0.70;
		double secondX = getCenterX() + handLength *Math.sin(second*Math.PI/30);
		double secondY = getCenterY()-handLength*Math.cos(second*Math.PI/60);
		Line line = new Line (getCenterX(),getCenterY(),secondX,secondY);
		line.setStroke(Color.BLUE);
		line.setStrokeWidth(2);
		this.getChildren().add(line);
		
	}

	private double getCenterY() {
		return width/2;
	}

	private double getCenterX() {
		return length/2;
	}

	private void getCircle() {
		Circle circle = new Circle(width/2,length/2,Math.min(width, length)*0.4);
		circle.setFill(Color.WHITE);
		circle.setStroke(Color.BLACK);
		this.getChildren().add(circle);
	}

	private int getCurrentSecond() {
		int second = calendar.get(Calendar.SECOND);
		return second;
	}

	private int getCurrentMinute() {
		int minute = calendar.get(Calendar.MINUTE);
		return minute;
	}

	private int getCurrentHour() {
		int hour = calendar.get(Calendar.HOUR);
		if ( hour <= 12)
			return hour;
		else
			return hour - 12;
	}
	
	public int getHour() {
		return hour;
	}
	
	public int getMinute() {
		return minute;
	}
	
	public int getSecond() {
		return second;
	}
	
	public void setHour(int hour) {
		this.hour = hour;
	}
	
	public void setMinute(int minute) {
		this.minute = minute;
	}
	
	public void setSecond(int second) {
		this.second = second;
	}
	
	public ClockPane setSize(double width, double length) {
		this.width = width;
		this.length = length;
		return new ClockPane(this.getSecond(),this.getHour(),this.getMinute(), width,  length);
	}

}
